podDisruptionBudget:
  enabled: true
  minAvailable: 1
    
resources:
  requests:
    cpu: "100m"
    memory: "50Mi"
  limits:
    cpu: "300m"
    memory: "150Mi"

autoscaling:
   enabled: true
   minReplicas: 1
   maxReplicas: 3
   metrics:
   - type: Resource
     resource:
       name: cpu
       target:
         type: Utilization
         averageUtilization: 60
   - type: Resource
     resource:
       name: memory
       target:
         type: Utilization
         averageUtilization: 60
   behavior:
     scaleDown:
       stabilizationWindowSeconds: 300
       policies:
       - type: Pods
         value: 1
         periodSeconds: 60

ingressClass:
  enabled: true
  isDefaultClass: true

service:
  type: LoadBalancer

tlsStore:
  default:
    defaultCertificate:
      secretName: traefik-wildcard-cert

ingressRoute:
  dashboard:
    enabled: false

image:
  tag: v3.0

providers:
  kubernetesCRD:
    enabled: true
    allowCrossNamespace: true
    allowExternalNameServices: true

  kubernetesIngress:
    enabled: true
    allowExternalNameServices: true
  
additionalArguments:
  - "--experimental.plugins.traefik-add-trace-id.modulename=github.com/trinnylondon/traefik-add-trace-id"
  - "--experimental.plugins.traefik-add-trace-id.version=v0.1.5"
  - "--tracing.openTelemetry.address=signoz-otel-collector.signoz.svc.cluster.local:4318"
  - "--tracing.openTelemetry.insecure=true"
  - "--tracing.openTelemetry.grpc=false"

experimental:
  v3:
    enabled: true
  plugins:
    enabled: true

logs:
  ## Traefik logs concern everything that happens to Traefik itself (startup, configuration, events, shutdown, and so on).
  general:
    # By default, the logs use a text format (common), but you can
    # also ask for the json format in the format option
    format: json
    # By default, the level is set to ERROR.
    # Alternative logging levels are DEBUG, PANIC, FATAL, ERROR, WARN, and INFO.
    level: DEBUG
  access:
    # To enable access logs
    enabled: true
    ## By default, logs are written using the Common Log Format (CLF) on stdout.
    ## To write logs in JSON, use json in the format option.
    ## If the given format is unsupported, the default (CLF) is used instead.
    format: json
#    filePath: "/var/log/traefik/access.log"
    ## To write the logs in an asynchronous fashion, specify a bufferingSize option.
    ## This option represents the number of log lines Traefik will keep in memory before writing
    ## them to the selected output. In some cases, this option can greatly help performances.
    # bufferingSize: 100
    ## Fields
    ## https://docs.traefik.io/observability/access-logs/#limiting-the-fieldsincluding-headers
    fields:
      general:
        defaultmode: keep
        names: {}
        ## Examples:
        # ClientUsername: drop
      headers:
        defaultmode: keep
        names:
          Authorization: redact

metrics:
  openTelemetry:
    enabled: true
    address: "signoz-otel-collector.signoz.svc.cluster.local:4318"
    addEntryPointsLabels: true
    addServicesLabels: true
    addRoutersLabels: true
    explicitBoundaries: [0.1,0.3,1.2,5.0]
    entryPoint: "metrics"
    insecure: true
    grpc: false

# Configure ports
ports:
  # The name of this one can't be changed as it is used for the readiness and
  # liveness probes, but you can adjust its config to your liking
  traefik:
    port: 9000
    # The port protocol (TCP/UDP)
    protocol: TCP
    
  postgres:
    port: 5432
    # The port protocol (TCP/UDP)
    protocol: TCP
    expose: true
    exposedPort: 6432
  
  web:
    ## Enable this entrypoint as a default entrypoint. When a service doesn't explicity set an entrypoint it will only use this entrypoint.
    # asDefault: true
    port: 8000
    # hostPort: 8000
    expose: true
    exposedPort: 8080
    # The port protocol (TCP/UDP)
    protocol: TCP
    # Use nodeport if set. This is useful if you have configured Traefik in a
    # LoadBalancer.
    # nodePort: 32080
    # Port Redirections
    # Added in 2.2, you can make permanent redirects via entrypoints.
    # https://docs.traefik.io/routing/entrypoints/#redirection
    redirectTo: websecure
    #
    # Trust forwarded  headers information (X-Forwarded-*).
    forwardedHeaders:
      trustedIPs: []
      insecure: false
    #
    # Enable the Proxy Protocol header parsing for the entry point
    proxyProtocol:
      trustedIPs: []
      insecure: false
    
  websecure:
    ## Enable this entrypoint as a default entrypoint. When a service doesn't explicity set an entrypoint it will only use this entrypoint.
    #    asDefault: true
    port: 8443
    # hostPort: 8443
    expose: true
    exposedPort: 8443
    ## The port protocol (TCP/UDP)
    protocol: TCP
    # nodePort: 32443
    #
    ## Enable HTTP/3 on the entrypoint
    ## Enabling it will also enable http3 experimental feature
    ## https://doc.traefik.io/traefik/routing/entrypoints/#http3
    ## There are known limitations when trying to listen on same ports for
    ## TCP & UDP (Http3). There is a workaround in this chart using dual Service.
    ## https://github.com/kubernetes/kubernetes/issues/47249#issuecomment-587960741
    http3:
      enabled: false
    # advertisedPort: 4443
    #
    ## Trust forwarded  headers information (X-Forwarded-*).
    forwardedHeaders:
      trustedIPs: []
      insecure: false
    #
    ## Enable the Proxy Protocol header parsing for the entry point
    proxyProtocol:
      trustedIPs: []
      insecure: false
    #
    ## Set TLS at the entrypoint
    ## https://doc.traefik.io/traefik/routing/entrypoints/#tls
    tls:
      enabled: true
  
  metrics:
    # When using hostNetwork, use another port to avoid conflict with node exporter:
    # https://github.com/prometheus/prometheus/wiki/Default-port-allocations
    port: 9100
    # The port protocol (TCP/UDP)
    protocol: TCP
  